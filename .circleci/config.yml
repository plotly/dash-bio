version: 2

jobs:
    node:
        docker:
            - image: circleci/python:3.7.5-stretch-node

        steps:
            - checkout
            - run:
                name: Check current version of node
                command: node -v
            - restore_cache:
                key: deps1-{{ .Branch }}-{{ checksum "package-lock.json" }}

            - run:
                name: Install package.json
                command: npm ci

            - save_cache:
                key: deps1-{{ .Branch }}-{{ checksum "package-lock.json" }}
                paths:
                    - node_modules

            - run:
                name: Run eslint
                command: ./node_modules/.bin/eslint src
                when: always

            - run:
                name: Install Dash for package build and build package
                command: |
                    python -m venv venv
                    . venv/bin/activate
                    git clone --depth 1 https://github.com/plotly/dash.git dash-main
                    cd dash-main && pip install -e .[dev,testing]
                    cd dash-renderer && npm run build && pip install -e . && cd ../..
                    npm run build

            - run:
                name: Run unit tests
                command: |
                    python -m venv venv
                    . venv/bin/activate
                    pip install dash_bio_utils
                    cd tests/unit
                    python unit_test_data_setup.py
                    cd ../../
                    npm run test

    python-3.6: &test-template
        docker:
            - image: circleci/python:3.6.9-stretch-node-browsers

        environment:
            PERCY_ENABLED: True

        steps:
            - checkout
            - run: echo $PYVERSION > ver.txt

            - restore_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "ver.txt" }}-{{ checksum ".circleci/config.yml" }}

            - run:
                name: Create virtualenv
                command: |
                    python3 -m venv venv

            - run:
                name: Install requirements
                command: |
                    . venv/bin/activate
                    pip install --progress-bar off -r tests/requirements.txt --quiet

            - save_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "ver.txt" }}-{{ checksum ".circleci/config.yml" }}
                paths:
                    - venv

            - run:
                name: Install Dash
                command: |
                    . venv/bin/activate
                    git clone --depth 1 https://github.com/plotly/dash.git dash-main
                    cd dash-main && pip install -e .[dev,testing]
                    cd dash-renderer && npm run build && pip install -e . && cd ../..

            - run:
                name: Run pylint
                command: |
                    . venv/bin/activate
                    pylint tests/ dash_bio/component_factory/
                when: always

            - run:
                name: Run flake8
                command: |
                    . venv/bin/activate
                    flake8 --max-line-length=100 tests/ dash_bio/component_factory/
                when: always

            - run:
                name: Run integration tests
                command: |
                    . venv/bin/activate
                    npm ci
                    npm run build
                    python setup.py sdist
                    cd dist
                    find . -name "*.gz" | xargs pip install --no-cache-dir --ignore-installed && cd ..
                    pytest tests/integration

            - run:
                name: Run unit tests
                command: |
                    python -m venv venv
                    . venv/bin/activate
                    pytest tests/unit

    python-3.7:
        <<: *test-template
        docker:
            - image: circleci/python:3.7.5-stretch-node-browsers

        environment:
            PERCY_ENABLED: True

    deploy_to_playground:
      docker:
        - image: circleci/python:3.6.9-stretch
      working_directory: ~/dash-sample-apps
      steps:
        - checkout
        - run:
            name: Add plotly remote
            command: git remote add playground https://dash-playground.plotly.host/GIT/$CIRCLE_BRANCH
        - run:
            name: Create helper-script
            command: printf '#!/bin/bash\necho username=$PLAYGROUND_DEPLOY_USERNAME\necho password=$PLAYGROUND_DEPLOY_PASSWORD' >> /home/circleci/helper-script.sh
        - run:
            name: Set up git config
            command: |
              git config --global credential.helper "/bin/bash /home/circleci/helper-script.sh"
              git config --global user.email '<>' # Leave email blank
              git config --global user.name "Circle MonoRepo Automatic Deployer"
        - run:
            name: Install curl
            command: |
              sudo apt update
              sudo apt install -y -qq curl
        - run:
            name: Install dds-client
            command: |
              curl -sSL -o dds-client.tgz https://github.com/plotly/dds-client/releases/download/v0.1.0/dds-client_0.1.0_linux_x86_64.tgz
              mkdir $HOME/bin
              tar xzf dds-client.tgz -C $HOME/bin
              chmod +x $HOME/bin/dds-client
        - run:
            name: Deploy
            command: |
              APPS_MODIFIED=$(git diff origin/master origin/$CIRCLE_BRANCH --dirstat=files,1 tests/dashbio_demos/ | awk '{ split($2,a,"/"); if (length(a[3]) != 0) { print a[3]} } ' | grep dash- | sort -u || true)
              COMMON_MODIFIED=$(git diff origin/master origin/$CIRCLE_BRANCH --dirstat=files,1 tests/dashbio_demos/common/ | awk '{ split($2,a,"/"); if (length(a[3]) != 0) { print a[3]} } ' | sort -u || true)
              if [ -n "$COMMON_MODIFIED" ]
              then
                APPS_MODIFIED=$(ls tests/dashbio_demos | grep dash- | sort -u)
              fi
              if [ -z "$APPS_MODIFIED" ]
              then
                    echo "No app change detected. Skipping the deploy.."
                    exit 0
              fi

              export APPS_DIR_RELATIVE="/tests/dashbio_demos"
              for APP in $APPS_MODIFIED
              do
                CREATE_APP=true DASH_ENTERPRISE_URL="$DASH_PLAYGROUND_ENTERPRISE_URL" DASH_ENTERPRISE_API_KEY="$DASH_PLAYGROUND_ENTERPRISE_API_KEY" PATH="$HOME/bin:$PATH" ./deploy "$APP"
              done

    deploy_to_gallery:
      docker:
        - image: circleci/python:3.6.9-stretch
      working_directory: ~/dash-sample-apps
      steps:
        - checkout
        - run:
            name: Add plotly remote
            command: git remote add gallery https://dash-playground.plotly.host/GIT/$CIRCLE_BRANCH
        - run:
            name: Create helper-script
            command: printf '#!/bin/bash\necho username=$GALLERY_DEPLOY_USERNAME\necho password=$GALLERY_DEPLOY_PASSWORD' >> /home/circleci/helper-script.sh
        - run:
            name: Set up git config
            command: |
              git config --global credential.helper "/bin/bash /home/circleci/helper-script.sh"
              git config --global user.email '<>' # Leave email blank
              git config --global user.name "Circle MonoRepo Automatic Deployer"
        - run:
            name: Install curl
            command: |
              sudo apt update
              sudo apt install -y -qq curl
        - run:
            name: Install dds-client
            command: |
              curl -sSL -o dds-client.tgz https://github.com/plotly/dds-client/releases/download/v0.1.0/dds-client_0.1.0_linux_x86_64.tgz
              mkdir $HOME/bin
              tar xzf dds-client.tgz -C $HOME/bin
              chmod +x $HOME/bin/dds-client
        - run:
            name: Deploy
            command: |
              APPS_MODIFIED=$(ls tests/dashbio_demos | grep dash- | sort -u)
              if [ -z "$APPS_MODIFIED" ]
              then
                    echo "No app change detected. Skipping the deploy.."
                    exit 0
              fi

              export APPS_DIR_RELATIVE="/tests/dashbio_demos"
              for APP in $APPS_MODIFIED
              do
                DASH_ENTERPRISE_URL="$DASH_GALLERY_ENTERPRISE_URL" DASH_ENTERPRISE_API_KEY="$DASH_GALLERY_ENTERPRISE_API_KEY" PATH="$HOME/bin:$PATH" ./deploy "$APP"
              done


workflows:
  version: 2
  build:
    jobs:
      - python-3.6
      - python-3.7
      - node
      - deploy_to_playground:
          filters:
            branches:
              ignore:
              - master
      - deploy_to_gallery:
          filters:
            branches:
              only:
              - master
